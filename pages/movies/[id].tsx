import React from 'react';
import Head from 'next/head'
import Image from 'next/image'
import useSWR from 'swr'
import { useRouter } from 'next/router'
import Layout from '../../components/layout'
import Spinner from '../../components/Spinner';

import { Genre, MovieDetailProps, ProductionCompany } from '../../types';
import Link from 'next/link';
import ExternalLinkIcon from '../../components/ExternalLinkIcon';

const fetcher = (url: string) => fetch(url).then(res => res.json())

const MovieDetails: React.FC<MovieDetailProps> = ({ imageConfig }) => {
  const router = useRouter()
  const { id } = router.query;
  const { data, error } = useSWR(`/api/movies/${id}`, fetcher);
  const posterImageBaseURL = `${imageConfig.base_url}${imageConfig.poster_sizes[3]}`;
  return (
    <div>
      <Layout>

        {error ?
          (<p className="bg-red-100 text-red-800 p-6 rounded-lg">An error has occurred.</p>) :
          !data ? (<Spinner />) : (
            <>
              <Head>
                <title>{`${data.title} | TFMDb`}</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
              </Head>
              <div className="md:flex text-center md:text-left items-center justify-between mb-4">
                <Link href="/">
                  <a className="cursor-pointer text-red-700 font-semibold hover:underline">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 inline mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 15l-3-3m0 0l3-3m-3 3h8M3 12a9 9 0 1118 0 9 9 0 01-18 0z" />
                    </svg>
                    Back to Trending Movies
                  </a>
                </Link>
                <p className="text-center md:text-left ">Fetched from{' '}
                  <a href={`/api/movies/${data.id}`} target="_blank" className="font-mono text-red-700 underline text-base" rel="noreferrer">
                    {`/api/movies/${data.id}`}
                    <ExternalLinkIcon />
                  </a>
                </p>
              </div>
              <div className="md:flex justify-between gap-6">
                <div className="w-2/3">
                  <h1 className="font-bold text-2xl">{data.title}</h1>
                  {data.tagline ? (<h2 className="text-lg italic">{data.tagline}</h2>) : ''}
                  <div className="my-4">
                {data.genres.map((g: Genre) => (<span key={g.id} className="bg-amber-200 uppercase text-sm mr-2 px-2 h-4 rounded-lg">{g.name}</span>))}
              </div>
              <div className="space-y-4">
                <p>{data.overview}</p>
                <p><a href={data.homepage} className="text-red-700 font-semibold underline">Movie Homepage <ExternalLinkIcon /></a></p>
                <p><a href={`https://www.imdb.com/title/${data.imdb_id}`} className="text-red-700 font-semibold underline">IMDb Link <ExternalLinkIcon /></a></p>
              </div>
              <p className="mt-4">Producers: {data.production_companies.map((p: ProductionCompany) => p.name).join(', ')}</p>
                </div>
                <div>
                <Image
                  alt={data.title}
                  src={`${posterImageBaseURL}${data.poster_path}`}
                  width={342}
                  height={513}
                />

                </div>
              </div>

            </>
          )}
      </Layout>
    </div>
  )
}

export default MovieDetails;

export async function getServerSideProps() {
  const url = process.env.THEMOVIEDB_API_URL + 'configuration?api_key=' + process.env.THEMOVIEDB_API_KEY;
  let imageConfig;
  await fetch(url).then(
    res => {
      return res.json()
    }
  ).then(
    configData => {
      const { base_url, poster_sizes } = configData.images;
      imageConfig = {
        base_url,
        poster_sizes
      }
    }
  );
  return {
    props: {
      imageConfig
    },
  }
}